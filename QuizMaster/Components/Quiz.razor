@using Microsoft.AspNetCore.Components.Web
@using QuizMaster.Models
@using QuizMaster.Services

@inject JsonFileQuestionService QuestionService
@{
	SetQuestion();
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@if (!finished)
{
	<div class="quiz-div">
		<div class="quiz-header">
			<div class="question">@currentQuestion.Question</div>
			<div class="circle-container">
				@for (int i = questions.Count - 1; i >= 0; i--)
				{
					string c = "";
					if (i < answersIndices.Count)
					{
						if (answersIndices[i] == questions[i].AnswerIndex)
							c += "#4cd137";
						else
							c += "#e84118";
					}
					else c += "#353b48";
					<div class="circle" style="background-color:@c"></div>
				}
			</div>
		</div>
		<div class="answer-div">

			@for (int i = 0; i < currentQuestion.Answers.Length; i++)
			{
				string c = "answer-button";
				var currentIndex = i;
				if (answered)
				{
					if (currentIndex == selectedAnswer && currentIndex == currentQuestion.AnswerIndex) c += " correct";
					else if (currentIndex == currentQuestion.AnswerIndex) c += " correct";
					else if (currentIndex == selectedAnswer) c += " wrong";
					else c += " remove";
				}
				<button class=@c @onclick="(e=>Answer(currentIndex))">
					<span class="button-text">@currentQuestion.Answers[i]</span>
				</button>

			}

		</div>
		@if (!showHint)
		{
			<div class="hint-div">
				<span>Hint</span>
				<button class="dropdown-toggle" @onclick="e=>UseHint()"></button>
			</div>
		}
		else
		{
			<div class="hint-div activated">
				<span>Hint</span>
				<button class="dropdown-toggle" @onclick="e=>UseHint()"></button>
			</div>
		}
		@if (showHint)
		{
			<div class="hint">
				@currentQuestion.Hint
			</div>
		}

		<div class="explanation @answered">
			<h3>Explanation:</h3>
			<p>
				@currentQuestion.Explanation
			</p>
		</div>
	</div>
	<div class="quiz-footer">
		<div class="quiz-footer-div">
			<span class="rate">
				<span class="rate=text">
				@if (voteCount == 0)
				{
					<span>Be the first to vote!</span>
				}
				else
				{
					<span>@voteCount @voteLabel</span>
				}
				</span>
				<span class="stars">
				@for (int i = 1; i < 6; i++)
				{
					var currentStar = i;
					if (i <= currentRating)
					{
						<span class="fa-star fa checked" @onclick="(e => SubmitRating(currentStar))"></span>
					}
					else
					{
						<span class="fa-star fa" @onclick="(e => SubmitRating(currentStar))"></span>

					}
				}
				</span>
			</span>
			<button @onclick="e => Submit()">Submit</button>
		</div>
	</div>
}
else
{
	<div class="quiz-div">
		<div class="quiz-header">
			<div class="question">You were able to do: @CorrectAnswers() Out of @questions.Count</div>
			<div class="circle-container">
				@for (int i = questions.Count - 1; i >= 0; i--)
				{
					string c = "";
					if (i < answersIndices.Count)
					{
						if (answersIndices[i] == questions[i].AnswerIndex)
							c += "#4cd137";
						else
							c += "#e84118";
					}
					else c += "#353b48";
					<div class="circle" style="background-color:@c"></div>
				}
			</div>
		</div>
	</div>
	<div class="quiz-footer">
		Refresh to do the test again.
	</div>
}

@code {
	int currentQuestionIndex = 0;
	List<QuestionModel> questions;
	QuestionModel? currentQuestion;
	List<int> answersIndices = new List<int>();
	int selectedAnswer = 0;
	bool answered = false;
	int hints = 3;
	bool showHint = false;
	bool finished = false;
	void SetQuestion()
	{
		voted = false;
		questions = QuestionService.GetQuestions();
		currentQuestion = questions[currentQuestionIndex];
		GetCurrentRating();
	}
	void Answer(int answerIndex)
	{
		if (answered) return;
		answered = true;
		answersIndices.Add(answerIndex);
		selectedAnswer = answerIndex;
	}
	void UseHint()
	{
		if (showHint || hints < 1)
			return;
		showHint = true;
		hints--;

	}
	void Submit()
	{
		if (!answered) return;
		answered = false;
		showHint = false;
		if (answersIndices.Count == questions.Count)
		{
			finished = true;
			return;
		}
		currentQuestionIndex++;
		SetQuestion();
	}
	int CorrectAnswers()
	{
		int sum = 0;
		for (int i = 0; i < answersIndices.Count; i++)
		{
			if (answersIndices[i] == questions[i].AnswerIndex)
				sum += 1;
		}
		return sum;
	}
	int currentRating = 0;
	int voteCount = 0;
	bool voted = false;
	string voteLabel;

	void GetCurrentRating()
	{
		if (currentQuestion.Ratings == null)
		{
			currentRating = 0;
			voteCount = 0;
		}
		else
		{
			voteCount = currentQuestion.Ratings.Count();
			voteLabel = voteCount > 1 ? "Votes" : "Vote";
			currentRating = (int)Math.Ceiling(Enumerable.Average(currentQuestion.Ratings));
		}
	}
	void SubmitRating(int rating)
	{
		if (voted) return;
		voted = true;
			QuestionService.AddRating(currentQuestion.Id, rating);
			SetQuestion();
	}

}